<?php

/**
 * @file
 *  Alipay FACE TO FACE PAYMENT METHOD for Drupal Commerce
 */

module_load_include('php','commerce_alipay_f2f','include/f2fUtility');
/**
 * Implements hook_menu().
 */

function commerce_alipay_f2f_menu() {
  // menu callback for processing notifications from Alipay
  $items['commerce/alipay_f2f/notify'] = array(
    'page callback' => 'commerce_alipay_f2f_notify_handler',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
 
function commerce_alipay_f2f_commerce_payment_method_info() {
  $payment_methods = array();

  // Declare Alipay payment method to redirect to external site.
  $payment_methods['alipay_f2f'] = array(
    'base' => 'commerce_alipay_f2f',
    'title' => t('Alipay Face 2 Face'),
    'terminal' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_alipay_f2f_settings_form($settings = NULL) {
  $form = array();

  // Declare form settings to configure the Alipay payment method.
  $form['apimethod'] = array(
    '#type' => 'select',
    '#title' => t('Payment service type'),
    '#description' => t('Payment methods.Currently only QR payment is supported'),
    '#default_value' => isset($settings['apimethod'])?$settings['apimethod']:'',
    '#options' => array(
      'alipay.trade.precreate' => t('QR Payment'),
    ),
    '#required' => TRUE,
  );
  
  $form['seller_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Seller ID'),
    '#default_value' => isset($settings['seller_id'])?$settings['seller_id']:'',
    '#required' => FALSE,
  );

  $form['app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('APP ID'),
    '#description' => t("Application ID created under your Alipay account."),
    '#default_value' => isset($settings['app_id'])?$settings['app_id']:'',
    '#required' => TRUE,
  );
  
  $form['notify_url'] = array(
	'#type' => 'textfield',
	'#title' => t('Notify Url'),
	'#description' => t('If you want to write your own handler for processing payment notifications from Alipay, replace the url here'),
	'#default_value' => isset($settings['notify_url'])?$settings['notify_url']:$GLOBALS['base_url'].'/commerce/alipay_f2f/notify',
	'#required'	=> TRUE,
  
  
  );
 
  $form['private_key'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 1000,
    '#title' => t('Private RSA Key'),
    '#description' => t("The RSA Private Key that you generate and will be used to sign POST data from this server ."),
    '#default_value' => isset($settings['private_key'])?$settings['private_key']:'',
    '#required' => TRUE,
  );
  
  $form['alipay_pub_key'] = array(
	'#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 1000,
    '#description' => t("Alipay RSA public key, which should be found under your Alipay account."),
    '#default_value' => isset($settings['alipay_pub_key'])?$settings['alipay_pub_key']:'',
    '#required' => TRUE, 
  );

  $form['debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable debug mode'),
    '#description' => t('This option will set the total amount of each order to 0.01 CNY.'),
    '#default_value' => isset($settings['debug'])?$settings['debug']:false,
  );
  
  

  return $form;
}

/**
 * Payment method callback: adds a message to the submission form.
 */
function commerce_alipay_f2f_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  
  $form['f2f_info'] = array(
  
          '#markup' => t('Proceed to generate the payment QR code.'),
          '#prefix' => '<span class="alipay-f2f-info">',
          '#suffix' => '</span>', 
  );

  return $form;
}

/**
 * Payment method callback: redirect form.
 *
 */
function commerce_alipay_f2f_redirect_form($form, &$form_state, $order, $payment_method) {
	
	
	 drupal_add_js(drupal_get_path('module', 'commerce_alipay_f2f') . '/js/qrcode.min.js',
                            array('group' => JS_THEME, 'every_page' => TRUE));
     drupal_add_js(drupal_get_path('module', 'commerce_alipay_f2f') . '/js/commerce_alipay_f2f.js');

  $form = array();
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $utility = f2fUtility::create();
  
  
  $product_ids = array();
  foreach (entity_metadata_wrapper('commerce_order', $order)->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $product_ids[] = $line_item_wrapper->commerce_product->raw();
    }
  }

  $pid = reset($product_ids);
  $product_title = commerce_product_load($pid)->title;    
  $site_name =  variable_get('site_name');
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  
  $line_items = $wrapper->commerce_line_items;
  $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
  $total = commerce_line_items_total($line_items);
  
  $amount = $payment_method['settings']['debug'] ? '1.0' : $wrapper->commerce_order_total->amount->value();


  $settings = $payment_method['settings'];

  // The request data to be posted to Alipay to generate payment QRcode.
    $bizParas = array(
		'out_trade_no' => $order->order_number,
		'subject' => t('!site_name--!product', array('!site_name' => $site_name,'!product' => $product_title)),
		'body' => commerce_alipay_f2f_data_body($order),
		'extend_params' => ['sys_service_provider_id' => ''],
		'timeout_express' => '5m',
		'total_amount' => commerce_currency_amount_to_decimal($amount, 'CNY'),

	);
	
   
    $paras = array(
				'app_id' => $settings['app_id'],
				'notify_url' => $settings['notify_url']
			);
			
    foreach($paras as $key => $value){
		
		$utility->setApiParas($key,$value);
		
	}
	
	foreach($bizParas as $key => $value){
		  
		   $utility->setBizParas($key,$value);
	}
	
	$pri_key = preg_replace('/\s*/','',$settings['private_key']);
	$utility->setPrivateKey($settings['private_key']);


	$requestUrl = $utility->getUrl();
	
	$postStrBody = $utility->getPostData();
  
	$header = $utility->httpHeaders();

	$res = drupal_http_request($requestUrl,array('method' => 'POST','data' => $postStrBody,'headers' => $header));

   if($res->code == 200) {
	   
	     $data = json_decode($res->data);
	     
	     if(isset($data->alipay_trade_precreate_response->code) && $data->alipay_trade_precreate_response->code == 10000) {
			
			      watchdog("notice","payment QR code fetched successfully");
			      $aliResp = $data->alipay_trade_precreate_response;
			      drupal_add_js(array('commerce_alipay_f2f' => array('ali_qrcode' => $aliResp->qr_code),), 'setting');
			      $linktext = t('Please click here');
			      $helpmsg = t('if you are viewing this page on a mobile or unable to scan the QR code for some reason.This link can open the Alipay App on your phone');
			      $form['qrcode_link'] = array(
				    '#type' => 'item',
				    '#markup' => sprintf('<div id="Alipay-qrlink"><a href="%s">%s</a> %s</div>',$aliResp->qr_code,$linktext,$helpmsg),
					);
                  
		 }else{
			 
			  drupal_set_message('Failed to get payment QRcode','error');
			  watchdog("notice",'Failed to get payment QRcode');
		 }
   }else {
	   
	     drupal_set_message('A network error occurred!','error');
   }
  
  $form['#token'] = FALSE;

   $form['qrcode'] = array(
                    '#type' => 'markup',
                    '#markup' => "<div class='qrcode'></div>",
                    );
  
  
  $form['order_number'] = array(
			'#type' => 'hidden',
			'#value' => trim($order->order_number),
    );
 
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Check'),
    '#submit' => array('commerce_alipay_f2f_payment_status_check'),
  );
  return $form;
}

 

function commerce_alipay_f2f_payment_status_check($form,&$form_state) {
	
	 if($order_number = $form_state['values']['order_number'])
				$order = commerce_order_load($order_number);
	  
	  if($order->status == 'completed') {
		  
		    // drupal_set_message(t('Payment completed'));
		    commerce_payment_redirect_pane_next_page($order);
		     
	  }else {
		  
		   drupal_set_message(t('Payment has not been completed yet'),'warning');
	  }
	   
}

/**
 * handler for processing notifications from Alipay
**/

function commerce_alipay_f2f_notify_handler() {



  if (empty($_POST)) {
    return FALSE;
  }else{
	  
	  $alipay_notify = $_POST;
  }
  
   if ($alipay_notify['trade_status'] == 'TRADE_FINISHED') {

            return;

    }
  
  $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $_POST['trade_no']));
 
   if (!empty($transactions)) {

       $transaction = reset($transactions);
       __transaction_status_is_lower($transaction->remote_status,$_POST['trade_status']);
       
    }
  
  $order = commerce_order_load($alipay_notify['out_trade_no']);

  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  
   if(commerce_alipay_f2f_notify_validate($order,$payment_method,$alipay_notify)) {
	   
	     watchdog('commerce_alipay_f2f','verification succeed!');
	     commerce_alipay_f2f_notify_submit($order,$payment_method,$alipay_notify);
	     //output the string 'success' so that Alipay will not send the same notifcation any more
	     print 'success';
   }else {
	   
	   watchdog('commerce_alipay_f2f','verification failed!');
   }
  
}

/**
 * checking if new notification payment status is higher than the status of the same, processed notifications 
**/

function __transaction_status_is_lower($current_status,$notify_status) {
	 
      $status_priority = array (
                        'WAIT_BUYER_PAY' => 1,
                        'WAIT_SELLER_SEND_GOODS' => 2,
                        'WAIT_BUYER_CONFIRM_GOODS' => 3,
                        'TRADE_FINISHED' => 4,
                        'TRADE_SUCCESS' => 4,
                      );
         
     if (isset($status_priority[$notify_status])) {
              
        if(($status_priority[$current_status] > $status_priority[$notify_status]) || ($notify_status == $current_status)) {
				
				      return TRUE;
			  }
	 }
			  return FALSE;
}

/**
 * Validation of Alipay's notifications.
 */
function commerce_alipay_f2f_notify_validate($order, $payment_method, $notify) {
  if (empty($notify)) {
    return FALSE;
  }
  
  $utility = f2fUtility::create();
  // Log an entry of the notification received for a transaction.
  watchdog('commerce_alipay_f2f', 'Customer returned from Alipay with the following data:<pre>@notify</pre>', array('@notify' => print_r($notify, TRUE)));
  
  $notify_sign = $notify['sign'];
  
  $utility->setPubKey($payment_method['settings']['alipay_pub_key']);
  
  $notify = drupal_get_query_parameters($notify,array('sign','sign_type'));

  
    return $utility->verify($notify,$notify_sign);
 

}

function commerce_alipay_f2f_notify_submit($order, $payment_method, $notify) {
  // Attempt to load prior authorization capture IPN created previously.
  $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $notify["trade_no"]));
  if (!empty($transactions)) {
  
    $transaction = reset($transactions);
    
  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
  }
  // Currently supports only transactions in CNY.
  $transaction->amount = commerce_currency_decimal_to_amount($notify['total_amount'], 'CNY');
  $transaction->currency_code = 'CNY';

  $transaction->remote_id = $notify["trade_no"];
  // Set the transaction's statuses based on notify's trade_status.
  $transaction->remote_status = $notify['trade_status'];
  $transaction->data['notify'] = $notify;

 
				
     // Handle trade types of cases.
					
    switch ($notify['trade_status']) {
      // Operation canceled.
      case 'TRADE_CLOSED':
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $transaction->message = t('Payment failed');
        commerce_order_status_update($order, 'canceled');
        break;


      // Pending buyer to process payment.
      case 'WAIT_BUYER_PAY':
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        $transaction->message = t('Waiting for the customer to pay');
        commerce_order_status_update($order, 'wait_buyer_pay');
        break;
      // Transaction complete.
      case 'TRADE_FINISHED':
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = t('Payment has been completed');

        commerce_order_status_update($order, 'completed');
        commerce_checkout_complete($order);

        break;

      // Transaction successful.
      case 'TRADE_SUCCESS':
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = t('Payment has been completed');
        commerce_order_status_update($order, 'completed');
        commerce_checkout_complete($order);
        break;
    }
  
  // Save the payment transaction and redirect to next page.
  commerce_payment_transaction_save($transaction);

  // Record an entry of the transaction with the order and trade numbers.
  watchdog('commerce_alipay', 'Notify processed for Order @order_number with ID @trade_no.', array('@trade_no' => $notify["trade_no"], '@order_number' => $order->order_number), WATCHDOG_INFO);
}



function commerce_alipay_f2f_data_body($order) {
  if (empty($order)) {
    return '';
  }
  else {
    // Get a list of the items from the order to be paid.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $line_items = $order_wrapper->commerce_line_items->value();
    foreach ($line_items as $line_item) {
      if ($line_item->type == 'product' && !empty($line_item->commerce_product)) {
        $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
        $body[] = $line_item_wrapper->commerce_product->title->value();
      }
    }
    return implode($body, ' | ');
  }
}

function commerce_alipay_f2f_icon_label($label,$path){
	
	
				$img_markup = theme('image', array(
											'path' => $path . 'alipay.gif',
											'title' => $label,
											'alt' => $label,
											'attributes' => array('class' => 'commerce-alipay-f2f-icon'),
									  )
							);
			    $html = $img_markup. '<span class="commerce-alipay-f2f-label">' . $label . '</span>';
			    
			    return $html;
}

function commerce_alipay_f2f_form_alter(&$form,&$form_state,$form_id) {
	

  if($form_id == 'commerce_checkout_form_payment') {
	
	 $order = reset($form_state['build_info']['args']);
	 
	 if ($order->data['payment_method'] == 'alipay_f2f|commerce_payment_alipay_f2f') {

	      $form['help'] = array(
			  
			     '#type' => 'markup',
			     '#prefix' => '<div class="checkout-help">',
			     '#suffix' => '</div>',
			     '#markup' => t('Open your Alipay APP and scan the QR code above to pay for the order'),
			     
		  );
	 }
  }
  
  if($form_id == 'commerce_checkout_form_checkout') {
	  
		if (!empty($form['commerce_payment']['payment_method']['#options'])) {
		   
			foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
					list($method_id, $rule_name) = explode('|', $key);


					if ($method_id == 'alipay_f2f') {
						    //get payment icon path
							$path = drupal_get_path('module', 'commerce_alipay_f2f') . '/images/';
                            $label = t("Alipay F2F QR Payment");
						
							$value = commerce_alipay_f2f_icon_label($label,$path);


							break;
					}
			}
		}
	  
  }
}



